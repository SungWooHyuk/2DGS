// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProtocol.proto

#include "DBProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DBProtocol {
constexpr SD_LOGIN::SD_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SD_LOGINDefaultTypeInternal {
  constexpr SD_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SD_LOGINDefaultTypeInternal() {}
  union {
    SD_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SD_LOGINDefaultTypeInternal _SD_LOGIN_default_instance_;
constexpr SD_SAVE_PLAYER::SD_SAVE_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u}){}
struct SD_SAVE_PLAYERDefaultTypeInternal {
  constexpr SD_SAVE_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SD_SAVE_PLAYERDefaultTypeInternal() {}
  union {
    SD_SAVE_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SD_SAVE_PLAYERDefaultTypeInternal _SD_SAVE_PLAYER_default_instance_;
constexpr SD_GET_INVENTORY::SD_GET_INVENTORY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u}){}
struct SD_GET_INVENTORYDefaultTypeInternal {
  constexpr SD_GET_INVENTORYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SD_GET_INVENTORYDefaultTypeInternal() {}
  union {
    SD_GET_INVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SD_GET_INVENTORYDefaultTypeInternal _SD_GET_INVENTORY_default_instance_;
constexpr SD_UPDATE_INVENTORY::SD_UPDATE_INVENTORY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(uint64_t{0u}){}
struct SD_UPDATE_INVENTORYDefaultTypeInternal {
  constexpr SD_UPDATE_INVENTORYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SD_UPDATE_INVENTORYDefaultTypeInternal() {}
  union {
    SD_UPDATE_INVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SD_UPDATE_INVENTORYDefaultTypeInternal _SD_UPDATE_INVENTORY_default_instance_;
constexpr DS_LOGIN::DS_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct DS_LOGINDefaultTypeInternal {
  constexpr DS_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DS_LOGINDefaultTypeInternal() {}
  union {
    DS_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DS_LOGINDefaultTypeInternal _DS_LOGIN_default_instance_;
constexpr DS_SAVE_PLAYER::DS_SAVE_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct DS_SAVE_PLAYERDefaultTypeInternal {
  constexpr DS_SAVE_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DS_SAVE_PLAYERDefaultTypeInternal() {}
  union {
    DS_SAVE_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DS_SAVE_PLAYERDefaultTypeInternal _DS_SAVE_PLAYER_default_instance_;
constexpr DS_UPDATE_GOLD::DS_UPDATE_GOLD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct DS_UPDATE_GOLDDefaultTypeInternal {
  constexpr DS_UPDATE_GOLDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DS_UPDATE_GOLDDefaultTypeInternal() {}
  union {
    DS_UPDATE_GOLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DS_UPDATE_GOLDDefaultTypeInternal _DS_UPDATE_GOLD_default_instance_;
}  // namespace DBProtocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DBProtocol_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DBProtocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DBProtocol_2eproto = nullptr;

const uint32_t TableStruct_DBProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_LOGIN, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_SAVE_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_SAVE_PLAYER, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_GET_INVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_GET_INVENTORY, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_UPDATE_INVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::SD_UPDATE_INVENTORY, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::DS_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::DS_LOGIN, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::DS_SAVE_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::DS_SAVE_PLAYER, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::DS_UPDATE_GOLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DBProtocol::DS_UPDATE_GOLD, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DBProtocol::SD_LOGIN)},
  { 7, -1, -1, sizeof(::DBProtocol::SD_SAVE_PLAYER)},
  { 14, -1, -1, sizeof(::DBProtocol::SD_GET_INVENTORY)},
  { 21, -1, -1, sizeof(::DBProtocol::SD_UPDATE_INVENTORY)},
  { 28, -1, -1, sizeof(::DBProtocol::DS_LOGIN)},
  { 35, -1, -1, sizeof(::DBProtocol::DS_SAVE_PLAYER)},
  { 42, -1, -1, sizeof(::DBProtocol::DS_UPDATE_GOLD)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_SD_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_SD_SAVE_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_SD_GET_INVENTORY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_SD_UPDATE_INVENTORY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_DS_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_DS_SAVE_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DBProtocol::_DS_UPDATE_GOLD_default_instance_),
};

const char descriptor_table_protodef_DBProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020DBProtocol.proto\022\nDBProtocol\032\nEnum.pro"
  "to\032\014Struct.proto\"\030\n\010SD_LOGIN\022\014\n\004name\030\001 \001"
  "(\t\"#\n\016SD_SAVE_PLAYER\022\021\n\tplayer_id\030\001 \001(\004\""
  "%\n\020SD_GET_INVENTORY\022\021\n\tplayer_id\030\001 \001(\004\"("
  "\n\023SD_UPDATE_INVENTORY\022\021\n\tplayer_id\030\001 \001(\004"
  "\"\033\n\010DS_LOGIN\022\017\n\007success\030\001 \001(\010\"!\n\016DS_SAVE"
  "_PLAYER\022\017\n\007success\030\001 \001(\010\"!\n\016DS_UPDATE_GO"
  "LD\022\017\n\007success\030\001 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DBProtocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DBProtocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DBProtocol_2eproto = {
  false, false, 307, descriptor_table_protodef_DBProtocol_2eproto, "DBProtocol.proto", 
  &descriptor_table_DBProtocol_2eproto_once, descriptor_table_DBProtocol_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_DBProtocol_2eproto::offsets,
  file_level_metadata_DBProtocol_2eproto, file_level_enum_descriptors_DBProtocol_2eproto, file_level_service_descriptors_DBProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DBProtocol_2eproto_getter() {
  return &descriptor_table_DBProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DBProtocol_2eproto(&descriptor_table_DBProtocol_2eproto);
namespace DBProtocol {

// ===================================================================

class SD_LOGIN::_Internal {
 public:
};

SD_LOGIN::SD_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.SD_LOGIN)
}
SD_LOGIN::SD_LOGIN(const SD_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DBProtocol.SD_LOGIN)
}

inline void SD_LOGIN::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SD_LOGIN::~SD_LOGIN() {
  // @@protoc_insertion_point(destructor:DBProtocol.SD_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SD_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SD_LOGIN::ArenaDtor(void* object) {
  SD_LOGIN* _this = reinterpret_cast< SD_LOGIN* >(object);
  (void)_this;
}
void SD_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SD_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SD_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.SD_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SD_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DBProtocol.SD_LOGIN.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SD_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.SD_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DBProtocol.SD_LOGIN.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.SD_LOGIN)
  return target;
}

size_t SD_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.SD_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SD_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SD_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SD_LOGIN::GetClassData() const { return &_class_data_; }

void SD_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SD_LOGIN *>(to)->MergeFrom(
      static_cast<const SD_LOGIN &>(from));
}


void SD_LOGIN::MergeFrom(const SD_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.SD_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SD_LOGIN::CopyFrom(const SD_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.SD_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_LOGIN::IsInitialized() const {
  return true;
}

void SD_LOGIN::InternalSwap(SD_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SD_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[0]);
}

// ===================================================================

class SD_SAVE_PLAYER::_Internal {
 public:
};

SD_SAVE_PLAYER::SD_SAVE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.SD_SAVE_PLAYER)
}
SD_SAVE_PLAYER::SD_SAVE_PLAYER(const SD_SAVE_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:DBProtocol.SD_SAVE_PLAYER)
}

inline void SD_SAVE_PLAYER::SharedCtor() {
player_id_ = uint64_t{0u};
}

SD_SAVE_PLAYER::~SD_SAVE_PLAYER() {
  // @@protoc_insertion_point(destructor:DBProtocol.SD_SAVE_PLAYER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SD_SAVE_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SD_SAVE_PLAYER::ArenaDtor(void* object) {
  SD_SAVE_PLAYER* _this = reinterpret_cast< SD_SAVE_PLAYER* >(object);
  (void)_this;
}
void SD_SAVE_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SD_SAVE_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SD_SAVE_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.SD_SAVE_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SD_SAVE_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SD_SAVE_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.SD_SAVE_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.SD_SAVE_PLAYER)
  return target;
}

size_t SD_SAVE_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.SD_SAVE_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SD_SAVE_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SD_SAVE_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SD_SAVE_PLAYER::GetClassData() const { return &_class_data_; }

void SD_SAVE_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SD_SAVE_PLAYER *>(to)->MergeFrom(
      static_cast<const SD_SAVE_PLAYER &>(from));
}


void SD_SAVE_PLAYER::MergeFrom(const SD_SAVE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.SD_SAVE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SD_SAVE_PLAYER::CopyFrom(const SD_SAVE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.SD_SAVE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_SAVE_PLAYER::IsInitialized() const {
  return true;
}

void SD_SAVE_PLAYER::InternalSwap(SD_SAVE_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SD_SAVE_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[1]);
}

// ===================================================================

class SD_GET_INVENTORY::_Internal {
 public:
};

SD_GET_INVENTORY::SD_GET_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.SD_GET_INVENTORY)
}
SD_GET_INVENTORY::SD_GET_INVENTORY(const SD_GET_INVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:DBProtocol.SD_GET_INVENTORY)
}

inline void SD_GET_INVENTORY::SharedCtor() {
player_id_ = uint64_t{0u};
}

SD_GET_INVENTORY::~SD_GET_INVENTORY() {
  // @@protoc_insertion_point(destructor:DBProtocol.SD_GET_INVENTORY)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SD_GET_INVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SD_GET_INVENTORY::ArenaDtor(void* object) {
  SD_GET_INVENTORY* _this = reinterpret_cast< SD_GET_INVENTORY* >(object);
  (void)_this;
}
void SD_GET_INVENTORY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SD_GET_INVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SD_GET_INVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.SD_GET_INVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SD_GET_INVENTORY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SD_GET_INVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.SD_GET_INVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.SD_GET_INVENTORY)
  return target;
}

size_t SD_GET_INVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.SD_GET_INVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SD_GET_INVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SD_GET_INVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SD_GET_INVENTORY::GetClassData() const { return &_class_data_; }

void SD_GET_INVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SD_GET_INVENTORY *>(to)->MergeFrom(
      static_cast<const SD_GET_INVENTORY &>(from));
}


void SD_GET_INVENTORY::MergeFrom(const SD_GET_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.SD_GET_INVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SD_GET_INVENTORY::CopyFrom(const SD_GET_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.SD_GET_INVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_GET_INVENTORY::IsInitialized() const {
  return true;
}

void SD_GET_INVENTORY::InternalSwap(SD_GET_INVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SD_GET_INVENTORY::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[2]);
}

// ===================================================================

class SD_UPDATE_INVENTORY::_Internal {
 public:
};

SD_UPDATE_INVENTORY::SD_UPDATE_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.SD_UPDATE_INVENTORY)
}
SD_UPDATE_INVENTORY::SD_UPDATE_INVENTORY(const SD_UPDATE_INVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:DBProtocol.SD_UPDATE_INVENTORY)
}

inline void SD_UPDATE_INVENTORY::SharedCtor() {
player_id_ = uint64_t{0u};
}

SD_UPDATE_INVENTORY::~SD_UPDATE_INVENTORY() {
  // @@protoc_insertion_point(destructor:DBProtocol.SD_UPDATE_INVENTORY)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SD_UPDATE_INVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SD_UPDATE_INVENTORY::ArenaDtor(void* object) {
  SD_UPDATE_INVENTORY* _this = reinterpret_cast< SD_UPDATE_INVENTORY* >(object);
  (void)_this;
}
void SD_UPDATE_INVENTORY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SD_UPDATE_INVENTORY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SD_UPDATE_INVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.SD_UPDATE_INVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SD_UPDATE_INVENTORY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SD_UPDATE_INVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.SD_UPDATE_INVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.SD_UPDATE_INVENTORY)
  return target;
}

size_t SD_UPDATE_INVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.SD_UPDATE_INVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SD_UPDATE_INVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SD_UPDATE_INVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SD_UPDATE_INVENTORY::GetClassData() const { return &_class_data_; }

void SD_UPDATE_INVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SD_UPDATE_INVENTORY *>(to)->MergeFrom(
      static_cast<const SD_UPDATE_INVENTORY &>(from));
}


void SD_UPDATE_INVENTORY::MergeFrom(const SD_UPDATE_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.SD_UPDATE_INVENTORY)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SD_UPDATE_INVENTORY::CopyFrom(const SD_UPDATE_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.SD_UPDATE_INVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_UPDATE_INVENTORY::IsInitialized() const {
  return true;
}

void SD_UPDATE_INVENTORY::InternalSwap(SD_UPDATE_INVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SD_UPDATE_INVENTORY::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[3]);
}

// ===================================================================

class DS_LOGIN::_Internal {
 public:
};

DS_LOGIN::DS_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.DS_LOGIN)
}
DS_LOGIN::DS_LOGIN(const DS_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DBProtocol.DS_LOGIN)
}

inline void DS_LOGIN::SharedCtor() {
success_ = false;
}

DS_LOGIN::~DS_LOGIN() {
  // @@protoc_insertion_point(destructor:DBProtocol.DS_LOGIN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DS_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DS_LOGIN::ArenaDtor(void* object) {
  DS_LOGIN* _this = reinterpret_cast< DS_LOGIN* >(object);
  (void)_this;
}
void DS_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DS_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.DS_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DS_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DS_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.DS_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.DS_LOGIN)
  return target;
}

size_t DS_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.DS_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DS_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DS_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DS_LOGIN::GetClassData() const { return &_class_data_; }

void DS_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DS_LOGIN *>(to)->MergeFrom(
      static_cast<const DS_LOGIN &>(from));
}


void DS_LOGIN::MergeFrom(const DS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.DS_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DS_LOGIN::CopyFrom(const DS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.DS_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_LOGIN::IsInitialized() const {
  return true;
}

void DS_LOGIN::InternalSwap(DS_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DS_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[4]);
}

// ===================================================================

class DS_SAVE_PLAYER::_Internal {
 public:
};

DS_SAVE_PLAYER::DS_SAVE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.DS_SAVE_PLAYER)
}
DS_SAVE_PLAYER::DS_SAVE_PLAYER(const DS_SAVE_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DBProtocol.DS_SAVE_PLAYER)
}

inline void DS_SAVE_PLAYER::SharedCtor() {
success_ = false;
}

DS_SAVE_PLAYER::~DS_SAVE_PLAYER() {
  // @@protoc_insertion_point(destructor:DBProtocol.DS_SAVE_PLAYER)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DS_SAVE_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DS_SAVE_PLAYER::ArenaDtor(void* object) {
  DS_SAVE_PLAYER* _this = reinterpret_cast< DS_SAVE_PLAYER* >(object);
  (void)_this;
}
void DS_SAVE_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS_SAVE_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DS_SAVE_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.DS_SAVE_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DS_SAVE_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DS_SAVE_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.DS_SAVE_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.DS_SAVE_PLAYER)
  return target;
}

size_t DS_SAVE_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.DS_SAVE_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DS_SAVE_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DS_SAVE_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DS_SAVE_PLAYER::GetClassData() const { return &_class_data_; }

void DS_SAVE_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DS_SAVE_PLAYER *>(to)->MergeFrom(
      static_cast<const DS_SAVE_PLAYER &>(from));
}


void DS_SAVE_PLAYER::MergeFrom(const DS_SAVE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.DS_SAVE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DS_SAVE_PLAYER::CopyFrom(const DS_SAVE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.DS_SAVE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_SAVE_PLAYER::IsInitialized() const {
  return true;
}

void DS_SAVE_PLAYER::InternalSwap(DS_SAVE_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DS_SAVE_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[5]);
}

// ===================================================================

class DS_UPDATE_GOLD::_Internal {
 public:
};

DS_UPDATE_GOLD::DS_UPDATE_GOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DBProtocol.DS_UPDATE_GOLD)
}
DS_UPDATE_GOLD::DS_UPDATE_GOLD(const DS_UPDATE_GOLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DBProtocol.DS_UPDATE_GOLD)
}

inline void DS_UPDATE_GOLD::SharedCtor() {
success_ = false;
}

DS_UPDATE_GOLD::~DS_UPDATE_GOLD() {
  // @@protoc_insertion_point(destructor:DBProtocol.DS_UPDATE_GOLD)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DS_UPDATE_GOLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DS_UPDATE_GOLD::ArenaDtor(void* object) {
  DS_UPDATE_GOLD* _this = reinterpret_cast< DS_UPDATE_GOLD* >(object);
  (void)_this;
}
void DS_UPDATE_GOLD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DS_UPDATE_GOLD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DS_UPDATE_GOLD::Clear() {
// @@protoc_insertion_point(message_clear_start:DBProtocol.DS_UPDATE_GOLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DS_UPDATE_GOLD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DS_UPDATE_GOLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DBProtocol.DS_UPDATE_GOLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DBProtocol.DS_UPDATE_GOLD)
  return target;
}

size_t DS_UPDATE_GOLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DBProtocol.DS_UPDATE_GOLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DS_UPDATE_GOLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DS_UPDATE_GOLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DS_UPDATE_GOLD::GetClassData() const { return &_class_data_; }

void DS_UPDATE_GOLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DS_UPDATE_GOLD *>(to)->MergeFrom(
      static_cast<const DS_UPDATE_GOLD &>(from));
}


void DS_UPDATE_GOLD::MergeFrom(const DS_UPDATE_GOLD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DBProtocol.DS_UPDATE_GOLD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DS_UPDATE_GOLD::CopyFrom(const DS_UPDATE_GOLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DBProtocol.DS_UPDATE_GOLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_UPDATE_GOLD::IsInitialized() const {
  return true;
}

void DS_UPDATE_GOLD::InternalSwap(DS_UPDATE_GOLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DS_UPDATE_GOLD::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DBProtocol_2eproto_getter, &descriptor_table_DBProtocol_2eproto_once,
      file_level_metadata_DBProtocol_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DBProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DBProtocol::SD_LOGIN* Arena::CreateMaybeMessage< ::DBProtocol::SD_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::SD_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::DBProtocol::SD_SAVE_PLAYER* Arena::CreateMaybeMessage< ::DBProtocol::SD_SAVE_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::SD_SAVE_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::DBProtocol::SD_GET_INVENTORY* Arena::CreateMaybeMessage< ::DBProtocol::SD_GET_INVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::SD_GET_INVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::DBProtocol::SD_UPDATE_INVENTORY* Arena::CreateMaybeMessage< ::DBProtocol::SD_UPDATE_INVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::SD_UPDATE_INVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::DBProtocol::DS_LOGIN* Arena::CreateMaybeMessage< ::DBProtocol::DS_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::DS_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::DBProtocol::DS_SAVE_PLAYER* Arena::CreateMaybeMessage< ::DBProtocol::DS_SAVE_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::DS_SAVE_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::DBProtocol::DS_UPDATE_GOLD* Arena::CreateMaybeMessage< ::DBProtocol::DS_UPDATE_GOLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DBProtocol::DS_UPDATE_GOLD >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
