// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DBProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DBProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DBProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DBProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DBProtocol_2eproto;
namespace DBProtocol {
class DS_LOGIN;
struct DS_LOGINDefaultTypeInternal;
extern DS_LOGINDefaultTypeInternal _DS_LOGIN_default_instance_;
class DS_SAVE_PLAYER;
struct DS_SAVE_PLAYERDefaultTypeInternal;
extern DS_SAVE_PLAYERDefaultTypeInternal _DS_SAVE_PLAYER_default_instance_;
class DS_UPDATE_GOLD;
struct DS_UPDATE_GOLDDefaultTypeInternal;
extern DS_UPDATE_GOLDDefaultTypeInternal _DS_UPDATE_GOLD_default_instance_;
class SD_GET_INVENTORY;
struct SD_GET_INVENTORYDefaultTypeInternal;
extern SD_GET_INVENTORYDefaultTypeInternal _SD_GET_INVENTORY_default_instance_;
class SD_LOGIN;
struct SD_LOGINDefaultTypeInternal;
extern SD_LOGINDefaultTypeInternal _SD_LOGIN_default_instance_;
class SD_SAVE_PLAYER;
struct SD_SAVE_PLAYERDefaultTypeInternal;
extern SD_SAVE_PLAYERDefaultTypeInternal _SD_SAVE_PLAYER_default_instance_;
class SD_UPDATE_INVENTORY;
struct SD_UPDATE_INVENTORYDefaultTypeInternal;
extern SD_UPDATE_INVENTORYDefaultTypeInternal _SD_UPDATE_INVENTORY_default_instance_;
}  // namespace DBProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::DBProtocol::DS_LOGIN* Arena::CreateMaybeMessage<::DBProtocol::DS_LOGIN>(Arena*);
template<> ::DBProtocol::DS_SAVE_PLAYER* Arena::CreateMaybeMessage<::DBProtocol::DS_SAVE_PLAYER>(Arena*);
template<> ::DBProtocol::DS_UPDATE_GOLD* Arena::CreateMaybeMessage<::DBProtocol::DS_UPDATE_GOLD>(Arena*);
template<> ::DBProtocol::SD_GET_INVENTORY* Arena::CreateMaybeMessage<::DBProtocol::SD_GET_INVENTORY>(Arena*);
template<> ::DBProtocol::SD_LOGIN* Arena::CreateMaybeMessage<::DBProtocol::SD_LOGIN>(Arena*);
template<> ::DBProtocol::SD_SAVE_PLAYER* Arena::CreateMaybeMessage<::DBProtocol::SD_SAVE_PLAYER>(Arena*);
template<> ::DBProtocol::SD_UPDATE_INVENTORY* Arena::CreateMaybeMessage<::DBProtocol::SD_UPDATE_INVENTORY>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DBProtocol {

// ===================================================================

class SD_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.SD_LOGIN) */ {
 public:
  inline SD_LOGIN() : SD_LOGIN(nullptr) {}
  ~SD_LOGIN() override;
  explicit constexpr SD_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SD_LOGIN(const SD_LOGIN& from);
  SD_LOGIN(SD_LOGIN&& from) noexcept
    : SD_LOGIN() {
    *this = ::std::move(from);
  }

  inline SD_LOGIN& operator=(const SD_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SD_LOGIN& operator=(SD_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SD_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const SD_LOGIN* internal_default_instance() {
    return reinterpret_cast<const SD_LOGIN*>(
               &_SD_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SD_LOGIN& a, SD_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(SD_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SD_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SD_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SD_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SD_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SD_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SD_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.SD_LOGIN";
  }
  protected:
  explicit SD_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.SD_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class SD_SAVE_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.SD_SAVE_PLAYER) */ {
 public:
  inline SD_SAVE_PLAYER() : SD_SAVE_PLAYER(nullptr) {}
  ~SD_SAVE_PLAYER() override;
  explicit constexpr SD_SAVE_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SD_SAVE_PLAYER(const SD_SAVE_PLAYER& from);
  SD_SAVE_PLAYER(SD_SAVE_PLAYER&& from) noexcept
    : SD_SAVE_PLAYER() {
    *this = ::std::move(from);
  }

  inline SD_SAVE_PLAYER& operator=(const SD_SAVE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SD_SAVE_PLAYER& operator=(SD_SAVE_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SD_SAVE_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const SD_SAVE_PLAYER* internal_default_instance() {
    return reinterpret_cast<const SD_SAVE_PLAYER*>(
               &_SD_SAVE_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SD_SAVE_PLAYER& a, SD_SAVE_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(SD_SAVE_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SD_SAVE_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SD_SAVE_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SD_SAVE_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SD_SAVE_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SD_SAVE_PLAYER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SD_SAVE_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.SD_SAVE_PLAYER";
  }
  protected:
  explicit SD_SAVE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 player_id = 1;
  void clear_player_id();
  uint64_t player_id() const;
  void set_player_id(uint64_t value);
  private:
  uint64_t _internal_player_id() const;
  void _internal_set_player_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.SD_SAVE_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class SD_GET_INVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.SD_GET_INVENTORY) */ {
 public:
  inline SD_GET_INVENTORY() : SD_GET_INVENTORY(nullptr) {}
  ~SD_GET_INVENTORY() override;
  explicit constexpr SD_GET_INVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SD_GET_INVENTORY(const SD_GET_INVENTORY& from);
  SD_GET_INVENTORY(SD_GET_INVENTORY&& from) noexcept
    : SD_GET_INVENTORY() {
    *this = ::std::move(from);
  }

  inline SD_GET_INVENTORY& operator=(const SD_GET_INVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline SD_GET_INVENTORY& operator=(SD_GET_INVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SD_GET_INVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const SD_GET_INVENTORY* internal_default_instance() {
    return reinterpret_cast<const SD_GET_INVENTORY*>(
               &_SD_GET_INVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SD_GET_INVENTORY& a, SD_GET_INVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(SD_GET_INVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SD_GET_INVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SD_GET_INVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SD_GET_INVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SD_GET_INVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SD_GET_INVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SD_GET_INVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.SD_GET_INVENTORY";
  }
  protected:
  explicit SD_GET_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 player_id = 1;
  void clear_player_id();
  uint64_t player_id() const;
  void set_player_id(uint64_t value);
  private:
  uint64_t _internal_player_id() const;
  void _internal_set_player_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.SD_GET_INVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class SD_UPDATE_INVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.SD_UPDATE_INVENTORY) */ {
 public:
  inline SD_UPDATE_INVENTORY() : SD_UPDATE_INVENTORY(nullptr) {}
  ~SD_UPDATE_INVENTORY() override;
  explicit constexpr SD_UPDATE_INVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SD_UPDATE_INVENTORY(const SD_UPDATE_INVENTORY& from);
  SD_UPDATE_INVENTORY(SD_UPDATE_INVENTORY&& from) noexcept
    : SD_UPDATE_INVENTORY() {
    *this = ::std::move(from);
  }

  inline SD_UPDATE_INVENTORY& operator=(const SD_UPDATE_INVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline SD_UPDATE_INVENTORY& operator=(SD_UPDATE_INVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SD_UPDATE_INVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const SD_UPDATE_INVENTORY* internal_default_instance() {
    return reinterpret_cast<const SD_UPDATE_INVENTORY*>(
               &_SD_UPDATE_INVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SD_UPDATE_INVENTORY& a, SD_UPDATE_INVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(SD_UPDATE_INVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SD_UPDATE_INVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SD_UPDATE_INVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SD_UPDATE_INVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SD_UPDATE_INVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SD_UPDATE_INVENTORY& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SD_UPDATE_INVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.SD_UPDATE_INVENTORY";
  }
  protected:
  explicit SD_UPDATE_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 player_id = 1;
  void clear_player_id();
  uint64_t player_id() const;
  void set_player_id(uint64_t value);
  private:
  uint64_t _internal_player_id() const;
  void _internal_set_player_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.SD_UPDATE_INVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class DS_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.DS_LOGIN) */ {
 public:
  inline DS_LOGIN() : DS_LOGIN(nullptr) {}
  ~DS_LOGIN() override;
  explicit constexpr DS_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DS_LOGIN(const DS_LOGIN& from);
  DS_LOGIN(DS_LOGIN&& from) noexcept
    : DS_LOGIN() {
    *this = ::std::move(from);
  }

  inline DS_LOGIN& operator=(const DS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline DS_LOGIN& operator=(DS_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DS_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const DS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const DS_LOGIN*>(
               &_DS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DS_LOGIN& a, DS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(DS_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DS_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DS_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DS_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DS_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DS_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DS_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.DS_LOGIN";
  }
  protected:
  explicit DS_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.DS_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class DS_SAVE_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.DS_SAVE_PLAYER) */ {
 public:
  inline DS_SAVE_PLAYER() : DS_SAVE_PLAYER(nullptr) {}
  ~DS_SAVE_PLAYER() override;
  explicit constexpr DS_SAVE_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DS_SAVE_PLAYER(const DS_SAVE_PLAYER& from);
  DS_SAVE_PLAYER(DS_SAVE_PLAYER&& from) noexcept
    : DS_SAVE_PLAYER() {
    *this = ::std::move(from);
  }

  inline DS_SAVE_PLAYER& operator=(const DS_SAVE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline DS_SAVE_PLAYER& operator=(DS_SAVE_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DS_SAVE_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const DS_SAVE_PLAYER* internal_default_instance() {
    return reinterpret_cast<const DS_SAVE_PLAYER*>(
               &_DS_SAVE_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DS_SAVE_PLAYER& a, DS_SAVE_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(DS_SAVE_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DS_SAVE_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DS_SAVE_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DS_SAVE_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DS_SAVE_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DS_SAVE_PLAYER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DS_SAVE_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.DS_SAVE_PLAYER";
  }
  protected:
  explicit DS_SAVE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.DS_SAVE_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// -------------------------------------------------------------------

class DS_UPDATE_GOLD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DBProtocol.DS_UPDATE_GOLD) */ {
 public:
  inline DS_UPDATE_GOLD() : DS_UPDATE_GOLD(nullptr) {}
  ~DS_UPDATE_GOLD() override;
  explicit constexpr DS_UPDATE_GOLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DS_UPDATE_GOLD(const DS_UPDATE_GOLD& from);
  DS_UPDATE_GOLD(DS_UPDATE_GOLD&& from) noexcept
    : DS_UPDATE_GOLD() {
    *this = ::std::move(from);
  }

  inline DS_UPDATE_GOLD& operator=(const DS_UPDATE_GOLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline DS_UPDATE_GOLD& operator=(DS_UPDATE_GOLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DS_UPDATE_GOLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const DS_UPDATE_GOLD* internal_default_instance() {
    return reinterpret_cast<const DS_UPDATE_GOLD*>(
               &_DS_UPDATE_GOLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DS_UPDATE_GOLD& a, DS_UPDATE_GOLD& b) {
    a.Swap(&b);
  }
  inline void Swap(DS_UPDATE_GOLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DS_UPDATE_GOLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DS_UPDATE_GOLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DS_UPDATE_GOLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DS_UPDATE_GOLD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DS_UPDATE_GOLD& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DS_UPDATE_GOLD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DBProtocol.DS_UPDATE_GOLD";
  }
  protected:
  explicit DS_UPDATE_GOLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DBProtocol.DS_UPDATE_GOLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DBProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SD_LOGIN

// string name = 1;
inline void SD_LOGIN::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SD_LOGIN::name() const {
  // @@protoc_insertion_point(field_get:DBProtocol.SD_LOGIN.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SD_LOGIN::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DBProtocol.SD_LOGIN.name)
}
inline std::string* SD_LOGIN::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DBProtocol.SD_LOGIN.name)
  return _s;
}
inline const std::string& SD_LOGIN::_internal_name() const {
  return name_.Get();
}
inline void SD_LOGIN::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SD_LOGIN::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SD_LOGIN::release_name() {
  // @@protoc_insertion_point(field_release:DBProtocol.SD_LOGIN.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SD_LOGIN::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DBProtocol.SD_LOGIN.name)
}

// -------------------------------------------------------------------

// SD_SAVE_PLAYER

// uint64 player_id = 1;
inline void SD_SAVE_PLAYER::clear_player_id() {
  player_id_ = uint64_t{0u};
}
inline uint64_t SD_SAVE_PLAYER::_internal_player_id() const {
  return player_id_;
}
inline uint64_t SD_SAVE_PLAYER::player_id() const {
  // @@protoc_insertion_point(field_get:DBProtocol.SD_SAVE_PLAYER.player_id)
  return _internal_player_id();
}
inline void SD_SAVE_PLAYER::_internal_set_player_id(uint64_t value) {
  
  player_id_ = value;
}
inline void SD_SAVE_PLAYER::set_player_id(uint64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:DBProtocol.SD_SAVE_PLAYER.player_id)
}

// -------------------------------------------------------------------

// SD_GET_INVENTORY

// uint64 player_id = 1;
inline void SD_GET_INVENTORY::clear_player_id() {
  player_id_ = uint64_t{0u};
}
inline uint64_t SD_GET_INVENTORY::_internal_player_id() const {
  return player_id_;
}
inline uint64_t SD_GET_INVENTORY::player_id() const {
  // @@protoc_insertion_point(field_get:DBProtocol.SD_GET_INVENTORY.player_id)
  return _internal_player_id();
}
inline void SD_GET_INVENTORY::_internal_set_player_id(uint64_t value) {
  
  player_id_ = value;
}
inline void SD_GET_INVENTORY::set_player_id(uint64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:DBProtocol.SD_GET_INVENTORY.player_id)
}

// -------------------------------------------------------------------

// SD_UPDATE_INVENTORY

// uint64 player_id = 1;
inline void SD_UPDATE_INVENTORY::clear_player_id() {
  player_id_ = uint64_t{0u};
}
inline uint64_t SD_UPDATE_INVENTORY::_internal_player_id() const {
  return player_id_;
}
inline uint64_t SD_UPDATE_INVENTORY::player_id() const {
  // @@protoc_insertion_point(field_get:DBProtocol.SD_UPDATE_INVENTORY.player_id)
  return _internal_player_id();
}
inline void SD_UPDATE_INVENTORY::_internal_set_player_id(uint64_t value) {
  
  player_id_ = value;
}
inline void SD_UPDATE_INVENTORY::set_player_id(uint64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:DBProtocol.SD_UPDATE_INVENTORY.player_id)
}

// -------------------------------------------------------------------

// DS_LOGIN

// bool success = 1;
inline void DS_LOGIN::clear_success() {
  success_ = false;
}
inline bool DS_LOGIN::_internal_success() const {
  return success_;
}
inline bool DS_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:DBProtocol.DS_LOGIN.success)
  return _internal_success();
}
inline void DS_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DS_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DBProtocol.DS_LOGIN.success)
}

// -------------------------------------------------------------------

// DS_SAVE_PLAYER

// bool success = 1;
inline void DS_SAVE_PLAYER::clear_success() {
  success_ = false;
}
inline bool DS_SAVE_PLAYER::_internal_success() const {
  return success_;
}
inline bool DS_SAVE_PLAYER::success() const {
  // @@protoc_insertion_point(field_get:DBProtocol.DS_SAVE_PLAYER.success)
  return _internal_success();
}
inline void DS_SAVE_PLAYER::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DS_SAVE_PLAYER::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DBProtocol.DS_SAVE_PLAYER.success)
}

// -------------------------------------------------------------------

// DS_UPDATE_GOLD

// bool success = 1;
inline void DS_UPDATE_GOLD::clear_success() {
  success_ = false;
}
inline bool DS_UPDATE_GOLD::_internal_success() const {
  return success_;
}
inline bool DS_UPDATE_GOLD::success() const {
  // @@protoc_insertion_point(field_get:DBProtocol.DS_UPDATE_GOLD.success)
  return _internal_success();
}
inline void DS_UPDATE_GOLD::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DS_UPDATE_GOLD::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DBProtocol.DS_UPDATE_GOLD.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DBProtocol_2eproto
